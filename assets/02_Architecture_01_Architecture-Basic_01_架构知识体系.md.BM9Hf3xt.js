import{_ as i,c as l,o as e,a8 as a}from"./chunks/framework.2F4O5CV0.js";const m=JSON.parse('{"title":"架构知识体系","description":"","frontmatter":{},"headers":[],"relativePath":"02_Architecture/01_Architecture-Basic/01_架构知识体系.md","filePath":"02_Architecture/01_Architecture-Basic/01_架构知识体系.md","lastUpdated":1714277096000}'),t={name:"02_Architecture/01_Architecture-Basic/01_架构知识体系.md"},r=a('<h1 id="架构知识体系" tabindex="-1">架构知识体系 <a class="header-anchor" href="#架构知识体系" aria-label="Permalink to &quot;架构知识体系&quot;">​</a></h1><h2 id="架构设计" tabindex="-1">架构设计 <a class="header-anchor" href="#架构设计" aria-label="Permalink to &quot;架构设计&quot;">​</a></h2><p>架构设计是指对系统的整体结构、功能、性能、可靠性、可扩展性、可维护性等方面进行设计，以满足系统的目标和需求。架构设计的目标是为了提高系统的可靠性、可扩展性、可维护性、可运维性、可管理性、可观察性等指标。</p><p>架构设计的主要任务是：</p><ol><li>确定系统的目标和需求。</li><li>确定系统的架构设计蓝图。</li><li>设计系统的组件、模块、子系统、接口、数据模型、服务等。</li><li>设计系统的架构层次结构。</li><li>设计系统的部署架构。</li><li>设计系统的性能、可靠性、可扩展性、可维护性、可运维性、可管理性、可观察性等指标。</li><li>设计系统的安全性、可用性、可靠性、可靠性等指标。</li><li>设计系统的可靠性、可扩展性、可维护性、可运维性、可管理性、可观察性等指标。</li><li>设计系统的可观察性。</li><li>设计系统的测试策略。</li><li>设计系统的发布策略。</li><li>设计系统的运维策略。</li><li>设计系统的监控策略。</li><li>设计系统的容量规划。</li><li>设计系统的成本规划。</li><li>设计系统的风险管理。</li><li>设计系统的持续改进策略。</li><li>设计系统的文档。</li><li>设计系统的评估。</li><li>设计系统的演化策略。</li></ol><h2 id="架构评估" tabindex="-1">架构评估 <a class="header-anchor" href="#架构评估" aria-label="Permalink to &quot;架构评估&quot;">​</a></h2><p>架构评估是指对系统的架构设计、实现、测试、部署、运维、监控、改进等各方面进行评估，以确定系统的架构是否满足目标和需求，并对系统的架构进行改进。</p><p>架构评估的主要任务是：</p><ol><li>评估系统的架构设计。</li><li>评估系统的实现。</li><li>评估系统的测试。</li><li>评估系统的部署。</li><li>评估系统的运维。</li><li>评估系统的监控。</li><li>评估系统的改进。</li><li>评估系统的成本。</li><li>评估系统的风险。</li><li>评估系统的持续改进。</li><li>评估系统的文档。</li></ol>',9),_=[r];function c(o,s,h,n,d,p){return e(),l("div",null,_)}const f=i(t,[["render",c]]);export{m as __pageData,f as default};
