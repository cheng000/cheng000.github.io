import{_ as r,c as o,ab as a,o as l}from"./chunks/framework.QPbt7WOJ.js";const c=JSON.parse('{"title":"算法效率评估","description":"","frontmatter":{},"headers":[],"relativePath":"01_Programmer/04_Algorithm/02_第2章_复杂度分析/01_算法效率评估.md","filePath":"01_Programmer/04_Algorithm/02_第2章_复杂度分析/01_算法效率评估.md","lastUpdated":1728710882000}'),e={name:"01_Programmer/04_Algorithm/02_第2章_复杂度分析/01_算法效率评估.md"};function i(s,t,n,p,_,g){return l(),o("div",null,t[0]||(t[0]=[a('<h1 id="算法效率评估" tabindex="-1">算法效率评估 <a class="header-anchor" href="#算法效率评估" aria-label="Permalink to &quot;算法效率评估&quot;">​</a></h1><p>在算法设计中，我们先后追求以下两个层面的目标。</p><ol><li><strong>找到问题解法</strong>：算法需要在规定的输入范围内可靠地求得问题的正确解。</li><li><strong>寻求最优解法</strong>：同一个问题可能存在多种解法，我们希望找到尽可能高效的算法。 也就是说，在能够解决问题的前提下，算法效率已成为衡量算法优劣的主要评价指标，它包括以下两个维度。</li></ol><ul><li><strong>时间效率</strong>：算法运行时间的长短。</li><li><strong>空间效率</strong>：算法占用内存空间的大小。 简而言之，<strong>我们的目标是设计“既快又省”的数据结构与算法</strong>。而有效地评估算法效率至关重要，因为只有这样，我们才能将各种算法进行对比，进而指导算法设计与优化过程。</li></ul><p>效率评估方法主要分为两种：<strong>实际测试、理论估算</strong>。</p><h2 id="_01-实际测试" tabindex="-1">01 实际测试 <a class="header-anchor" href="#_01-实际测试" aria-label="Permalink to &quot;01 实际测试&quot;">​</a></h2><p>假设我们现在有算法 A 和算法 B ，它们都能解决同一问题，现在需要对比这两个算法的效率。最直接的方法是找一台计算机，运行这两个算法，并监控记录它们的运行时间和内存占用情况。这种评估方式能够反映真实情况，但也存在较大的局限性。</p><p><strong>一方面，难以排除测试环境的干扰因素</strong>。硬件配置会影响算法的性能表现。比如一个算法的并行度较高，那么它就更适合在多核 CPU 上运行，一个算法的内存操作密集，那么它在高性能内存上的表现就会更好。也就是说，算法在不同的机器上的测试结果可能是不一致的。这意味着我们需要在各种机器上进行测试，统计平均效率，而这是不现实的。</p><p><strong>另一方面，展开完整测试非常耗费资源</strong>。随着输入数据量的变化，算法会表现出不同的效率。例如，在输入数据量较小时，算法 A 的运行时间比算法 B 短；而在输入数据量较大时，测试结果可能恰恰相反。因此，为了得到有说服力的结论，我们需要测试各种规模的输入数据，而这需要耗费大量的计算资源。</p><h2 id="_02-理论估算" tabindex="-1">02 理论估算 <a class="header-anchor" href="#_02-理论估算" aria-label="Permalink to &quot;02 理论估算&quot;">​</a></h2><p>由于实际测试具有较大的局限性，因此我们可以考虑仅通过一些计算来评估算法的效率。这种估算方法被称为<strong>渐近复杂度分析（asymptotic complexity analysis），简称复杂度分析</strong>。</p><p>复杂度分析能够体现算法运行所需的时间和空间资源与输入数据大小之间的关系。<strong>它描述了随着输入数据大小的增加，算法执行所需时间和空间的增长趋势</strong>。这个定义有些拗口，我们可以将其分为三个重点来理解。</p><ul><li>“时间和空间资源”分别对应时间复杂度（time complexity）和空间复杂度（space complexity）。</li><li>“随着输入数据大小的增加”意味着复杂度反映了算法运行效率与输入数据体量之间的关系。</li><li>“时间和空间的增长趋势”表示复杂度分析关注的不是运行时间或占用空间的具体值，而是时间或空间增长的“快慢”。</li></ul><p><strong>复杂度分析克服了实际测试方法的弊端</strong>，体现在以下几个方面:</p><ul><li>它无需实际运行代码，更加绿色节能。</li><li>它独立于测试环境，分析结果适用于所有运行平台。</li><li>它可以体现不同数据量下的算法效率，尤其是在大数据量下的算法性能。</li></ul><p>复杂度分析为我们提供了一把评估算法效率的“标尺”，使我们可以衡量执行某个算法所需的时间和空间资源，对比不同算法之间的效率。</p><p>复杂度是个数学概念，对于初学者可能比较抽象，学习难度相对较高。从这个角度看，复杂度分析可能不太适合作为最先介绍的内容。然而，当我们讨论某个数据结构或算法的特点时，难以避免要分析其运行速度和空间使用情况。</p><p>综上所述，建议你在深入学习数据结构与算法之前，<strong>先对复杂度分析建立初步的了解，以便能够完成简单算法的复杂度分析</strong>。</p>',18)]))}const d=r(e,[["render",i]]);export{c as __pageData,d as default};
