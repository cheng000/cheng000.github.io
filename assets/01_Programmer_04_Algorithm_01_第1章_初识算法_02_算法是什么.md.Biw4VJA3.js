import{_ as t,c as a,o as e,ab as r}from"./chunks/framework.BGN0zjd9.js";const u=JSON.parse('{"title":"算法是什么","description":"","frontmatter":{},"headers":[],"relativePath":"01_Programmer/04_Algorithm/01_第1章_初识算法/02_算法是什么.md","filePath":"01_Programmer/04_Algorithm/01_第1章_初识算法/02_算法是什么.md","lastUpdated":1723861775000}'),l={name:"01_Programmer/04_Algorithm/01_第1章_初识算法/02_算法是什么.md"},i=r('<h1 id="算法是什么" tabindex="-1">算法是什么 <a class="header-anchor" href="#算法是什么" aria-label="Permalink to &quot;算法是什么&quot;">​</a></h1><h2 id="_01-算法定义" tabindex="-1">01 算法定义 <a class="header-anchor" href="#_01-算法定义" aria-label="Permalink to &quot;01 算法定义&quot;">​</a></h2><p><strong>算法（algorithm）</strong> 是在有限时间内解决特定问题的一组指令或操作步骤，它具有以下特性。</p><ul><li>问题是明确的，包含清晰的输入和输出定义。</li><li>具有可行性，能够在有限步骤、时间和内存空间下完成。</li><li>各步骤都有确定的含义，在相同的输入和运行条件下，输出始终相同。</li></ul><h2 id="_02-数据结构定义" tabindex="-1">02 数据结构定义 <a class="header-anchor" href="#_02-数据结构定义" aria-label="Permalink to &quot;02 数据结构定义&quot;">​</a></h2><p><strong>数据结构（data structure）</strong> 是组织和存储数据的方式，涵盖数据内容、数据之间关系和数据操作方法，它具有以下设计目标。</p><ul><li>空间占用尽量少，以节省计算机内存。</li><li>数据操作尽可能快速，涵盖数据访问、添加、删除、更新等。</li><li>提供简洁的数据表示和逻辑信息，以便算法高效运行。</li></ul><p><strong>数据结构设计是一个充满权衡的过程。</strong> 如果想在某方面取得提升，往往需要在另一方面作出妥协。下面举两个例子。</p><p>链表相较于数组，在数据添加和删除操作上更加便捷，但牺牲了数据访问速度。 图相较于链表，提供了更丰富的逻辑信息，但需要占用更大的内存空间。</p><h2 id="_03-数据结构与算法的关系" tabindex="-1">03 数据结构与算法的关系 <a class="header-anchor" href="#_03-数据结构与算法的关系" aria-label="Permalink to &quot;03 数据结构与算法的关系&quot;">​</a></h2><p>如图 1-4 所示，数据结构与算法高度相关、紧密结合，具体表现在以下三个方面。</p><ul><li>数据结构是算法的基石。数据结构为算法提供了结构化存储的数据，以及操作数据的方法。</li><li>算法是数据结构发挥作用的舞台。数据结构本身仅存储数据信息，结合算法才能解决特定问题。</li><li>算法通常可以基于不同的数据结构实现，但执行效率可能相差很大，选择合适的数据结构是关键。 <img src="https://raw.githubusercontent.com/cheng000/picture/main/vitepress-blog/20240815125958.png" alt="" loading="lazy"></li></ul><div style="text-align:center;"> 图 1-4 数据结构与算法的关系 </div><p>数据结构与算法犹如拼装积木。一套积木，除了包含许多零件之外，还附有详细的组装说明书。我们按照说明书一步步操作，就能组装出精美的积木模型。</p><p>两者的详细对应关系如表 1-1 所示。</p><div style="text-align:center;"> 表 1-1 将数据结构与算法类比为拼装积木 </div><table tabindex="0"><thead><tr><th>数据结构与算法</th><th>拼装积木</th></tr></thead><tbody><tr><td>输入数据</td><td>未拼装的积木</td></tr><tr><td>数据结构</td><td>积木组织形式，包括形状、大小、连接方式等</td></tr><tr><td>算法</td><td>组把积木拼成目标形态的一系列操作步骤</td></tr><tr><td>输出数据</td><td>积木模型</td></tr></tbody></table><p>值得说明的是，数据结构与算法是独立于编程语言的。正因如此，本书得以提供基于多种编程语言的实现。</p><div class="tip custom-block"><p class="custom-block-title">约定俗成的简称</p><p>在实际讨论时，我们通常会将“数据结构与算法”简称为“算法”。比如众所周知的 LeetCode 算法题目，实际上同时考查数据结构和算法两方面的知识。</p></div>',19),o=[i];function d(_,s,n,c,h,p){return e(),a("div",null,o)}const g=t(l,[["render",d]]);export{u as __pageData,g as default};
